'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On
Namespace Data.PayPeriod


    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.Serializable(),  _
        Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
        Global.System.ComponentModel.ToolboxItem(true),  _
        Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
        Global.System.Xml.Serialization.XmlRootAttribute("FileDataSet"),  _
        Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
    Partial Public Class FileDataSet
        Inherits Global.System.Data.DataSet
    
        Private tableServers As ServersDataTable
    
        Private tableTips As TipsDataTable
    
        Private tableSettings As SettingsDataTable
    
        Private tableSpecialFunctions As SpecialFunctionsDataTable
    
        Private relationFK_Servers_Tips1 As Global.System.Data.DataRelation
    
        Private relationFK_SpecialFunctions_Tips As Global.System.Data.DataRelation
    
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context, false)
            If (Me.IsBinarySerialized(info, context) = true) Then
                Me.InitVars(false)
                Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
                AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
                AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
                Return
            End If
            Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
            If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
                If (Not (ds.Tables("Servers")) Is Nothing) Then
                    MyBase.Tables.Add(New ServersDataTable(ds.Tables("Servers")))
                End If
                If (Not (ds.Tables("Tips")) Is Nothing) Then
                    MyBase.Tables.Add(New TipsDataTable(ds.Tables("Tips")))
                End If
                If (Not (ds.Tables("Settings")) Is Nothing) Then
                    MyBase.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
                End If
                If (Not (ds.Tables("SpecialFunctions")) Is Nothing) Then
                    MyBase.Tables.Add(New SpecialFunctionsDataTable(ds.Tables("SpecialFunctions")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            End If
            Me.GetSerializationData(info, context)
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Servers() As ServersDataTable
            Get
                Return Me.tableServers
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Tips() As TipsDataTable
            Get
                Return Me.tableTips
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property Settings() As SettingsDataTable
            Get
                Return Me.tableSettings
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.Browsable(false),  _
            Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
        Public ReadOnly Property SpecialFunctions() As SpecialFunctionsDataTable
            Get
                Return Me.tableSpecialFunctions
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.BrowsableAttribute(true),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
            Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As FileDataSet = CType(MyBase.Clone,FileDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
                ds.ReadXml(reader)
                If (Not (ds.Tables("Servers")) Is Nothing) Then
                    MyBase.Tables.Add(New ServersDataTable(ds.Tables("Servers")))
                End If
                If (Not (ds.Tables("Tips")) Is Nothing) Then
                    MyBase.Tables.Add(New TipsDataTable(ds.Tables("Tips")))
                End If
                If (Not (ds.Tables("Settings")) Is Nothing) Then
                    MyBase.Tables.Add(New SettingsDataTable(ds.Tables("Settings")))
                End If
                If (Not (ds.Tables("SpecialFunctions")) Is Nothing) Then
                    MyBase.Tables.Add(New SpecialFunctionsDataTable(ds.Tables("SpecialFunctions")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableServers = CType(MyBase.Tables("Servers"),ServersDataTable)
            If (initTable = true) Then
                If (Not (Me.tableServers) Is Nothing) Then
                    Me.tableServers.InitVars
                End If
            End If
            Me.tableTips = CType(MyBase.Tables("Tips"),TipsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableTips) Is Nothing) Then
                    Me.tableTips.InitVars
                End If
            End If
            Me.tableSettings = CType(MyBase.Tables("Settings"),SettingsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableSettings) Is Nothing) Then
                    Me.tableSettings.InitVars
                End If
            End If
            Me.tableSpecialFunctions = CType(MyBase.Tables("SpecialFunctions"),SpecialFunctionsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableSpecialFunctions) Is Nothing) Then
                    Me.tableSpecialFunctions.InitVars
                End If
            End If
            Me.relationFK_Servers_Tips1 = Me.Relations("FK_Servers_Tips1")
            Me.relationFK_SpecialFunctions_Tips = Me.Relations("FK_SpecialFunctions_Tips")
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub InitClass()
            Me.DataSetName = "FileDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://tempuri.org/FileDataSet.xsd"
            Me.CaseSensitive = true
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableServers = New ServersDataTable()
            MyBase.Tables.Add(Me.tableServers)
            Me.tableTips = New TipsDataTable()
            MyBase.Tables.Add(Me.tableTips)
            Me.tableSettings = New SettingsDataTable()
            MyBase.Tables.Add(Me.tableSettings)
            Me.tableSpecialFunctions = New SpecialFunctionsDataTable()
            MyBase.Tables.Add(Me.tableSpecialFunctions)
            Dim fkc As Global.System.Data.ForeignKeyConstraint
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_Servers_Tips1", New Global.System.Data.DataColumn() {Me.tableServers.ServerNumberColumn, Me.tableServers.FirstNameColumn, Me.tableServers.LastNameColumn}, New Global.System.Data.DataColumn() {Me.tableTips.ServerNumberColumn, Me.tableTips.FirstNameColumn, Me.tableTips.LastNameColumn})
            Me.tableTips.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.Cascade
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            fkc = New Global.System.Data.ForeignKeyConstraint("FK_SpecialFunctions_Tips", New Global.System.Data.DataColumn() {Me.tableSpecialFunctions.SpecialFunctionColumn}, New Global.System.Data.DataColumn() {Me.tableTips.SpecialFunctionColumn})
            Me.tableTips.Constraints.Add(fkc)
            fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.Cascade
            fkc.DeleteRule = Global.System.Data.Rule.Cascade
            fkc.UpdateRule = Global.System.Data.Rule.Cascade
            Me.relationFK_Servers_Tips1 = New Global.System.Data.DataRelation("FK_Servers_Tips1", New Global.System.Data.DataColumn() {Me.tableServers.ServerNumberColumn, Me.tableServers.FirstNameColumn, Me.tableServers.LastNameColumn}, New Global.System.Data.DataColumn() {Me.tableTips.ServerNumberColumn, Me.tableTips.FirstNameColumn, Me.tableTips.LastNameColumn}, false)
            Me.Relations.Add(Me.relationFK_Servers_Tips1)
            Me.relationFK_SpecialFunctions_Tips = New Global.System.Data.DataRelation("FK_SpecialFunctions_Tips", New Global.System.Data.DataColumn() {Me.tableSpecialFunctions.SpecialFunctionColumn}, New Global.System.Data.DataColumn() {Me.tableTips.SpecialFunctionColumn}, false)
            Me.Relations.Add(Me.relationFK_SpecialFunctions_Tips)
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function ShouldSerializeServers() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function ShouldSerializeTips() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function ShouldSerializeSettings() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Function ShouldSerializeSpecialFunctions() As Boolean
            Return false
        End Function
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
    
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
            Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As FileDataSet = New FileDataSet()
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                        
                            Do While ((s1.Position <> s1.Length)  _
                                AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                    
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Delegate Sub ServersRowChangeEventHandler(ByVal sender As Object, ByVal e As ServersRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Delegate Sub TipsRowChangeEventHandler(ByVal sender As Object, ByVal e As TipsRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Delegate Sub SettingsRowChangeEventHandler(ByVal sender As Object, ByVal e As SettingsRowChangeEvent)
    
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Delegate Sub SpecialFunctionsRowChangeEventHandler(ByVal sender As Object, ByVal e As SpecialFunctionsRowChangeEvent)
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ServersDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
        
            Private columnServerNumber As Global.System.Data.DataColumn
        
            Private columnFirstName As Global.System.Data.DataColumn
        
            Private columnLastName As Global.System.Data.DataColumn
        
            Private columnSuppressChit As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Servers"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property ServerNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnServerNumber
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFirstName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property SuppressChitColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSuppressChit
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ServersRow
                Get
                    Return CType(Me.Rows(index),ServersRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event ServersRowChanging As ServersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event ServersRowChanged As ServersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event ServersRowDeleting As ServersRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event ServersRowDeleted As ServersRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Sub AddServersRow(ByVal row As ServersRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Function AddServersRow(ByVal ServerNumber As String, ByVal FirstName As String, ByVal LastName As String, ByVal SuppressChit As Boolean) As ServersRow
                Dim rowServersRow As ServersRow = CType(Me.NewRow,ServersRow)
                Dim columnValuesArray() As Object = New Object() {ServerNumber, FirstName, LastName, SuppressChit}
                rowServersRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowServersRow)
                Return rowServersRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function FindByServerNumber(ByVal ServerNumber As String) As ServersRow
                Return CType(Me.Rows.Find(New Object() {ServerNumber}),ServersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ServersDataTable = CType(MyBase.Clone,ServersDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ServersDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnServerNumber = MyBase.Columns("ServerNumber")
                Me.columnFirstName = MyBase.Columns("FirstName")
                Me.columnLastName = MyBase.Columns("LastName")
                Me.columnSuppressChit = MyBase.Columns("SuppressChit")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Sub InitClass()
                Me.columnServerNumber = New Global.System.Data.DataColumn("ServerNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnServerNumber)
                Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstName)
                Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastName)
                Me.columnSuppressChit = New Global.System.Data.DataColumn("SuppressChit", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSuppressChit)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnServerNumber}, true))
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint2", New Global.System.Data.DataColumn() {Me.columnServerNumber, Me.columnFirstName, Me.columnLastName}, false))
                Me.columnServerNumber.AllowDBNull = false
                Me.columnServerNumber.Unique = true
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function NewServersRow() As ServersRow
                Return CType(Me.NewRow,ServersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ServersRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ServersRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ServersRowChangedEvent) Is Nothing) Then
                    RaiseEvent ServersRowChanged(Me, New ServersRowChangeEvent(CType(e.Row,ServersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ServersRowChangingEvent) Is Nothing) Then
                    RaiseEvent ServersRowChanging(Me, New ServersRowChangeEvent(CType(e.Row,ServersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ServersRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ServersRowDeleted(Me, New ServersRowChangeEvent(CType(e.Row,ServersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ServersRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ServersRowDeleting(Me, New ServersRowChangeEvent(CType(e.Row,ServersRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub RemoveServersRow(ByVal row As ServersRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As FileDataSet = New FileDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ServersDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class TipsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
        
            Private columnTipID As Global.System.Data.DataColumn
        
            Private columnAmount As Global.System.Data.DataColumn
        
            Private columnServerNumber As Global.System.Data.DataColumn
        
            Private columnFirstName As Global.System.Data.DataColumn
        
            Private columnLastName As Global.System.Data.DataColumn
        
            Private columnDescription As Global.System.Data.DataColumn
        
            Private columnSpecialFunction As Global.System.Data.DataColumn
        
            Private columnWorkingDate As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Tips"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property TipIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTipID
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAmount
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property ServerNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnServerNumber
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFirstName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastName
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property SpecialFunctionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpecialFunction
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property WorkingDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWorkingDate
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As TipsRow
                Get
                    Return CType(Me.Rows(index),TipsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event TipsRowChanging As TipsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event TipsRowChanged As TipsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event TipsRowDeleting As TipsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event TipsRowDeleted As TipsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Sub AddTipsRow(ByVal row As TipsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Function AddTipsRow(ByVal Amount As String, ByVal ServerNumber As String, ByVal FirstName As String, ByVal LastName As String, ByVal Description As String, ByVal parentSpecialFunctionsRowByFK_SpecialFunctions_Tips As SpecialFunctionsRow, ByVal WorkingDate As Date) As TipsRow
                Dim rowTipsRow As TipsRow = CType(Me.NewRow,TipsRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, Amount, ServerNumber, FirstName, LastName, Description, Nothing, WorkingDate}
                If (Not (parentSpecialFunctionsRowByFK_SpecialFunctions_Tips) Is Nothing) Then
                    columnValuesArray(6) = parentSpecialFunctionsRowByFK_SpecialFunctions_Tips(0)
                End If
                rowTipsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowTipsRow)
                Return rowTipsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function FindByTipID(ByVal TipID As Integer) As TipsRow
                Return CType(Me.Rows.Find(New Object() {TipID}),TipsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As TipsDataTable = CType(MyBase.Clone,TipsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New TipsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnTipID = MyBase.Columns("TipID")
                Me.columnAmount = MyBase.Columns("Amount")
                Me.columnServerNumber = MyBase.Columns("ServerNumber")
                Me.columnFirstName = MyBase.Columns("FirstName")
                Me.columnLastName = MyBase.Columns("LastName")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnSpecialFunction = MyBase.Columns("SpecialFunction")
                Me.columnWorkingDate = MyBase.Columns("WorkingDate")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Sub InitClass()
                Me.columnTipID = New Global.System.Data.DataColumn("TipID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTipID)
                Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAmount)
                Me.columnServerNumber = New Global.System.Data.DataColumn("ServerNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnServerNumber)
                Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFirstName)
                Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastName)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnSpecialFunction = New Global.System.Data.DataColumn("SpecialFunction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpecialFunction)
                Me.columnWorkingDate = New Global.System.Data.DataColumn("WorkingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWorkingDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTipID}, true))
                Me.columnTipID.AutoIncrement = true
                Me.columnTipID.AllowDBNull = false
                Me.columnTipID.Unique = true
                Me.columnAmount.AllowDBNull = false
                Me.columnServerNumber.AllowDBNull = false
                Me.columnDescription.AllowDBNull = false
                Me.columnWorkingDate.AllowDBNull = false
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function NewTipsRow() As TipsRow
                Return CType(Me.NewRow,TipsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New TipsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(TipsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.TipsRowChangedEvent) Is Nothing) Then
                    RaiseEvent TipsRowChanged(Me, New TipsRowChangeEvent(CType(e.Row,TipsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.TipsRowChangingEvent) Is Nothing) Then
                    RaiseEvent TipsRowChanging(Me, New TipsRowChangeEvent(CType(e.Row,TipsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.TipsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent TipsRowDeleted(Me, New TipsRowChangeEvent(CType(e.Row,TipsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.TipsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent TipsRowDeleting(Me, New TipsRowChangeEvent(CType(e.Row,TipsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub RemoveTipsRow(ByVal row As TipsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As FileDataSet = New FileDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "TipsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class SettingsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
        
            Private columnSetting As Global.System.Data.DataColumn
        
            Private columnValue As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Settings"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property SettingColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSetting
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValue
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As SettingsRow
                Get
                    Return CType(Me.Rows(index),SettingsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SettingsRowChanging As SettingsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SettingsRowChanged As SettingsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SettingsRowDeleting As SettingsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SettingsRowDeleted As SettingsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Sub AddSettingsRow(ByVal row As SettingsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Function AddSettingsRow(ByVal Setting As String, ByVal Value As String) As SettingsRow
                Dim rowSettingsRow As SettingsRow = CType(Me.NewRow,SettingsRow)
                Dim columnValuesArray() As Object = New Object() {Setting, Value}
                rowSettingsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSettingsRow)
                Return rowSettingsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function FindBySetting(ByVal Setting As String) As SettingsRow
                Return CType(Me.Rows.Find(New Object() {Setting}),SettingsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SettingsDataTable = CType(MyBase.Clone,SettingsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SettingsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnSetting = MyBase.Columns("Setting")
                Me.columnValue = MyBase.Columns("Value")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Sub InitClass()
                Me.columnSetting = New Global.System.Data.DataColumn("Setting", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSetting)
                Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValue)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSetting}, true))
                Me.columnSetting.AllowDBNull = false
                Me.columnSetting.Unique = true
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function NewSettingsRow() As SettingsRow
                Return CType(Me.NewRow,SettingsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SettingsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SettingsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SettingsRowChangedEvent) Is Nothing) Then
                    RaiseEvent SettingsRowChanged(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SettingsRowChangingEvent) Is Nothing) Then
                    RaiseEvent SettingsRowChanging(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SettingsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SettingsRowDeleted(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SettingsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SettingsRowDeleting(Me, New SettingsRowChangeEvent(CType(e.Row,SettingsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub RemoveSettingsRow(ByVal row As SettingsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As FileDataSet = New FileDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SettingsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Serializable(),  _
            Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class SpecialFunctionsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
        
            Private columnSpecialFunction As Global.System.Data.DataColumn
        
            Private columnDate As Global.System.Data.DataColumn
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "SpecialFunctions"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
                MyBase.New(info, context)
                Me.InitVars
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property SpecialFunctionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSpecialFunction
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDate
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0"),  _
                Global.System.ComponentModel.Browsable(false)>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As SpecialFunctionsRow
                Get
                    Return CType(Me.Rows(index),SpecialFunctionsRow)
                End Get
            End Property
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SpecialFunctionsRowChanging As SpecialFunctionsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SpecialFunctionsRowChanged As SpecialFunctionsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SpecialFunctionsRowDeleting As SpecialFunctionsRowChangeEventHandler
        
            <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Event SpecialFunctionsRowDeleted As SpecialFunctionsRowChangeEventHandler
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Sub AddSpecialFunctionsRow(ByVal row As SpecialFunctionsRow)
                Me.Rows.Add(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overloads Function AddSpecialFunctionsRow(ByVal SpecialFunction As String, ByVal _Date As Date) As SpecialFunctionsRow
                Dim rowSpecialFunctionsRow As SpecialFunctionsRow = CType(Me.NewRow,SpecialFunctionsRow)
                Dim columnValuesArray() As Object = New Object() {SpecialFunction, _Date}
                rowSpecialFunctionsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSpecialFunctionsRow)
                Return rowSpecialFunctionsRow
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function FindBySpecialFunction(ByVal SpecialFunction As String) As SpecialFunctionsRow
                Return CType(Me.Rows.Find(New Object() {SpecialFunction}),SpecialFunctionsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SpecialFunctionsDataTable = CType(MyBase.Clone,SpecialFunctionsDataTable)
                cln.InitVars
                Return cln
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SpecialFunctionsDataTable()
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub InitVars()
                Me.columnSpecialFunction = MyBase.Columns("SpecialFunction")
                Me.columnDate = MyBase.Columns("Date")
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Private Sub InitClass()
                Me.columnSpecialFunction = New Global.System.Data.DataColumn("SpecialFunction", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSpecialFunction)
                Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
                Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
                Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
                MyBase.Columns.Add(Me.columnDate)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSpecialFunction}, true))
                Me.columnSpecialFunction.AllowDBNull = false
                Me.columnSpecialFunction.Unique = true
                Me.columnDate.AllowDBNull = false
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function NewSpecialFunctionsRow() As SpecialFunctionsRow
                Return CType(Me.NewRow,SpecialFunctionsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SpecialFunctionsRow(builder)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SpecialFunctionsRow)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SpecialFunctionsRowChangedEvent) Is Nothing) Then
                    RaiseEvent SpecialFunctionsRowChanged(Me, New SpecialFunctionsRowChangeEvent(CType(e.Row,SpecialFunctionsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SpecialFunctionsRowChangingEvent) Is Nothing) Then
                    RaiseEvent SpecialFunctionsRowChanging(Me, New SpecialFunctionsRowChangeEvent(CType(e.Row,SpecialFunctionsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SpecialFunctionsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SpecialFunctionsRowDeleted(Me, New SpecialFunctionsRowChangeEvent(CType(e.Row,SpecialFunctionsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SpecialFunctionsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SpecialFunctionsRowDeleting(Me, New SpecialFunctionsRowChangeEvent(CType(e.Row,SpecialFunctionsRow), e.Action))
                End If
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub RemoveSpecialFunctionsRow(ByVal row As SpecialFunctionsRow)
                Me.Rows.Remove(row)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
                Dim ds As FileDataSet = New FileDataSet()
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SpecialFunctionsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                            
                                Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                        
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ServersRow
            Inherits Global.System.Data.DataRow
        
            Private tableServers As ServersDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableServers = CType(Me.Table,ServersDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property ServerNumber() As String
                Get
                    Return CType(Me(Me.tableServers.ServerNumberColumn),String)
                End Get
                Set
                    Me(Me.tableServers.ServerNumberColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property FirstName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServers.FirstNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Servers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServers.FirstNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property LastName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServers.LastNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Servers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServers.LastNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property SuppressChit() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableServers.SuppressChitColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SuppressChit' in table 'Servers' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServers.SuppressChitColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsFirstNameNull() As Boolean
                Return Me.IsNull(Me.tableServers.FirstNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetFirstNameNull()
                Me(Me.tableServers.FirstNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsLastNameNull() As Boolean
                Return Me.IsNull(Me.tableServers.LastNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetLastNameNull()
                Me(Me.tableServers.LastNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsSuppressChitNull() As Boolean
                Return Me.IsNull(Me.tableServers.SuppressChitColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetSuppressChitNull()
                Me(Me.tableServers.SuppressChitColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function GetTipsRows() As TipsRow()
                If (Me.Table.ChildRelations("FK_Servers_Tips1") Is Nothing) Then
                    Return New TipsRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Servers_Tips1")),TipsRow())
                End If
            End Function
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class TipsRow
            Inherits Global.System.Data.DataRow
        
            Private tableTips As TipsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableTips = CType(Me.Table,TipsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property TipID() As Integer
                Get
                    Return CType(Me(Me.tableTips.TipIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableTips.TipIDColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property Amount() As String
                Get
                    Return CType(Me(Me.tableTips.AmountColumn),String)
                End Get
                Set
                    Me(Me.tableTips.AmountColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property ServerNumber() As String
                Get
                    Return CType(Me(Me.tableTips.ServerNumberColumn),String)
                End Get
                Set
                    Me(Me.tableTips.ServerNumberColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property FirstName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableTips.FirstNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'Tips' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTips.FirstNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property LastName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableTips.LastNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'Tips' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTips.LastNameColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property Description() As String
                Get
                    Return CType(Me(Me.tableTips.DescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableTips.DescriptionColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property SpecialFunction() As String
                Get
                    Try 
                        Return CType(Me(Me.tableTips.SpecialFunctionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SpecialFunction' in table 'Tips' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableTips.SpecialFunctionColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property WorkingDate() As Date
                Get
                    Return CType(Me(Me.tableTips.WorkingDateColumn),Date)
                End Get
                Set
                    Me(Me.tableTips.WorkingDateColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property ServersRowParent() As ServersRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Servers_Tips1")),ServersRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Servers_Tips1"))
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property SpecialFunctionsRow() As SpecialFunctionsRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_SpecialFunctions_Tips")),SpecialFunctionsRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_SpecialFunctions_Tips"))
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsFirstNameNull() As Boolean
                Return Me.IsNull(Me.tableTips.FirstNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetFirstNameNull()
                Me(Me.tableTips.FirstNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsLastNameNull() As Boolean
                Return Me.IsNull(Me.tableTips.LastNameColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetLastNameNull()
                Me(Me.tableTips.LastNameColumn) = Global.System.Convert.DBNull
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsSpecialFunctionNull() As Boolean
                Return Me.IsNull(Me.tableTips.SpecialFunctionColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetSpecialFunctionNull()
                Me(Me.tableTips.SpecialFunctionColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class SettingsRow
            Inherits Global.System.Data.DataRow
        
            Private tableSettings As SettingsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSettings = CType(Me.Table,SettingsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property Setting() As String
                Get
                    Return CType(Me(Me.tableSettings.SettingColumn),String)
                End Get
                Set
                    Me(Me.tableSettings.SettingColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property Value() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSettings.ValueColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Value' in table 'Settings' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSettings.ValueColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function IsValueNull() As Boolean
                Return Me.IsNull(Me.tableSettings.ValueColumn)
            End Function
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub SetValueNull()
                Me(Me.tableSettings.ValueColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
    
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class SpecialFunctionsRow
            Inherits Global.System.Data.DataRow
        
            Private tableSpecialFunctions As SpecialFunctionsDataTable
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSpecialFunctions = CType(Me.Table,SpecialFunctionsDataTable)
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property SpecialFunction() As String
                Get
                    Return CType(Me(Me.tableSpecialFunctions.SpecialFunctionColumn),String)
                End Get
                Set
                    Me(Me.tableSpecialFunctions.SpecialFunctionColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Property _Date() As Date
                Get
                    Return CType(Me(Me.tableSpecialFunctions.DateColumn),Date)
                End Get
                Set
                    Me(Me.tableSpecialFunctions.DateColumn) = value
                End Set
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Function GetTipsRows() As TipsRow()
                If (Me.Table.ChildRelations("FK_SpecialFunctions_Tips") Is Nothing) Then
                    Return New TipsRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_SpecialFunctions_Tips")),TipsRow())
                End If
            End Function
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Class ServersRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As ServersRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New(ByVal row As ServersRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Row() As ServersRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Class TipsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As TipsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New(ByVal row As TipsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Row() As TipsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Class SettingsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As SettingsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New(ByVal row As SettingsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Row() As SettingsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    
        '''<summary>
        '''Row event argument class
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
        Public Class SpecialFunctionsRowChangeEvent
            Inherits Global.System.EventArgs
        
            Private eventRow As SpecialFunctionsRow
        
            Private eventAction As Global.System.Data.DataRowAction
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public Sub New(ByVal row As SpecialFunctionsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Row() As SpecialFunctionsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
        
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
                Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "16.0.0.0")>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End NameSpace